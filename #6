# 14-group


가상 함수(virtual function)
 virtual 키워드로 선언된 멤버 함수
 virtual 키워드의 의미
◼ 동적 바인딩 지시어
◼ 컴파일러에게 함수에 대한 호출 바인딩을 실행 시간까지 미루도록 지시



 함수 오버라이딩(function overriding)
 파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선
언
◼ 기본 클래스의 가상 함수의 존재감 상실시킴
◼ 파생 클래스에서 오버라이딩한 함수가 호출되도록 동적 바인딩
◼ 함수 재정의라고도 부름
◼ 다형성의 한 종류

함수 재정의라는 용어를 사용할 때 신중을 기해야 한다. 가상 함수를 재정의하는 경우와
아닌 경우에 따라 프로그램의 실행이 완전히 달라지기 때문이다([그림 9-3] 참고).
가상 함수를 재정의하는 오버라이딩의 경우 함수가 호출되는 실행 시간에 동적 바인딩
이 일어나지만, 그렇지 않은 경우 컴파일 시간에 결정된 함수가 단순히 호출된다(정적
바인딩).
저자는 가상 함수를 재정의하는 것을 오버라이딩으로, 그렇지 않는 경우를 함수 재정의
로 구분하고자 한다.
Java의 경우 이런 혼란은 없다. 멤버 함수가 가상이냐 아니냐로 구분되지 않으며, 함수
재정의는 곧 오버라이딩이며, 무조건 동적 바인딩이 일어난다


예제 9-2(오버라이딩과 가상 함수 호출)
#include <iostream>
using namespace std;
class Base {
public:
virtual void f() { cout << "Base::f() called" << endl; }
};
class Derived : public Base {
public:
virtual void f() { cout << "Derived::f() called" << endl; }
};
int main() {
Derived d, *pDer;
pDer = &d;
pDer->f(); // Derived::f() 호출
Base * pBase;
pBase = pDer; // 업 캐스팅
pBase->f(); // 동적 바인딩 발생!! Derived::f() 실행
}

*동적 바인딩
-파생 클래스에 대해
-기본 클래스에 대한 포인텉로 가상 함수를 호출하는 경우
-객체 내에 오버라이딩한 파생 클래스의 함수를 찾아 실행.



9-3(상속이 반복되는 경우 가상 함수 호출)

class Base {
public:
virtual void f() { cout << "Base::f() called" << endl; }
};
class Derived : public Base {
public:
void f() { cout << "Derived::f() called" << endl; }
};
class GrandDerived : public Derived {
public:
void f() { cout << "GrandDerived::f() called" << endl; }
};
int main() {
GrandDerived g;
Base *bp;
Derived *dp;
GrandDerived *gp;
bp = dp = gp = &g;
bp->f();
dp->f();
gp->f();
}

범위 지정 연산자(::)
- 정적 바인딩 지시
-기본 클래스::가상함수() 형태로 기본 클래스의 가상 함수를 정적 바인등으로 호출

9-4(범위 지정 연산자를 이용한 가상 함수 호출)
#include <iostream>
using namespace std;
class Shape {
public:
virtual void draw() {
cout << "--Shape--";
}
};
class Circle : public Shape {
public:
virtual void draw() {
Shape::draw(); // 기본 클래스의 draw() 호출
cout << "Circle" << endl;
}
};
int main() {
Circle circle;
Shape * pShape = &circle;
pShape->draw();
pShape->Shape::draw();
}

<실행 결과>
--Shape--Circle
--Shape--


*가상 소멸자
-소멸자를 virtual 키워드로 선언
-소멸자 호출 시 동적 바인딩 발생


*가상 함수를 가진 기본 클래스의 목적

Shape은 상속을 위한 기본 클래스로의 역할
• 가상 함수 draw()로 파생 클래스의
인터페이스를 보여줌
• Shape 객체를 생성할 목적 아님
• 파생 클래스에서 draw() 재정의.
자신의 도형을 그리도록 유도


* 파생 클래스마다 다르게 구현하는 다형성

*파생 클래스에서 가상 함수 draw()의 재정의
 *기본 클래스의 포인터 활용
기본 클래스의 포인터로 파생 클래스 접근
- pStart, pLast, p의 타입이 Shape*
- 링크드 리스트를 따라 Shape을 상속받은 파생 객체들 접근
- p->paint()의 간단한 호출로 파생 객체에 오버라이딩된 draw()
함수 호출


**추상 클래스**

*순수 가상 함수
기본 클래스의 포인터로 파생 클래스 접근
- pStart, pLast, p의 타입이 Shape*
- 링크드 리스트를 따라 Shape을 상속받은 파생 객체들 접근
- p->paint()의 간단한 호출로 파생 객체에 오버라이딩된 draw()
함수 호출

*추상 클래스 최소한 하나의 순수 갓아 함수를 가진 클래스

특징(
-온전한 클래스가 아니므로 객체 생성 불가능
-추상 클래스의 포인터는 선언 가능

목적
_추상 클래스의 인스턴스를 생성할 목적 아님
-상속에서 기본 클래스의 역할을 하기 위함


